module net.sf.orcc.cal.Cal

import net.sf.orcc.cal.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.xtext.generator.parser.antlr.*
import org.eclipse.emf.mwe2.ecore.*

var rootPath = "."
var projectName = "net.sf.orcc.cal"
var runtimeProject = "${projectName}"
var fileExtensions = "cal"
var grammarURI = "platform:/resource/${projectName}/src/net/sf/orcc/cal/Cal.xtext"
Workflow {

	bean = StandaloneSetup {

		// use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
		resourceSet = org.eclipse.xtext.resource.XtextResourceSet : theResourceSet {}

		// add mappings from platform:/resource to classpath:/
		uriMap = {
			from = "platform:/resource/org.eclipse.xtext.xbase/"
			to = "classpath:/"
		}
		uriMap = {
			from = "platform:/resource/org.eclipse.xtext.common.types/"
			to = "classpath:/"
		}
		
		// for builds without .project file
		projectMapping = {
			projectName = '${projectName}'
			path = '${runtimeProject}'
		}

		// register current projects and its siblings for platform URI map, as they are not on the classpath.
		platformUri = "${runtimeProject}/.."// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	

	component = DirectoryCleaner {
        directory = "${runtimeProject}/emf-gen"
    }
    
    component = EcoreGenerator {
    	generateEdit = false
    	generateEditor = false
        genModel = "platform:/resource/${projectName}/model/custom/Cal.genmodel"
        srcPath = "platform:/resource/${projectName}/src"
    }
    
    component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				genericIde = {
     			   name = "${projectName}.ui"
    			}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}

		}
		cleaner = {
			enabled = false
		}

		language = XtextGeneratorLanguage {
		    name = "${projectName}.Cal"
		    fileExtensions = fileExtensions
		    grammarUri = grammarURI
		    
		 	resourceSet = theResourceSet
		 	referencedResource = "platform:/resource/${projectName}/model/custom/Cal.genmodel"
		    
		    fragment = grammarAccess.GrammarAccessFragment2 {}
//		    fragment = ecore.EMFGeneratorFragment2 {
//		        javaModelDirectory = "/${projectName}/src-gen"
//		    }
			
			// do we need this ?
//			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

		    fragment = serializer.SerializerFragment2 {
		        generateStub = false
		    }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
		        antlrParam = "-Xconversiontimeout" antlrParam = "5000"
		    }
		    fragment = validation.ValidatorFragment2 {
		        composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
		        composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
		    }
//		    fragment = scoping.ImportNamespacesScopingFragment2 {
//		    	generateStub = false
//		    }
		    fragment = exporting.QualifiedNamesFragment2 {}
		    fragment = builder.BuilderIntegrationFragment2 {}
		    fragment = generator.GeneratorFragment2 {}
		    fragment = formatting.Formatter2Fragment2 {}
//		    fragment = ui.labeling.LabelProviderFragment2 {}
//		    fragment = ui.outline.QuickOutlineFragment2 {}
//		    fragment = ui.outline.OutlineTreeProviderFragment2 {}
//		    fragment = ui.contentAssist.ContentAssistFragment2 {}
//		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		    fragment = junit.JUnitFragment {}
//		    fragment = ui.quickfix.QuickfixProviderFragment2 {}
		    fragment = ui.refactoring.RefactorElementNameFragment2 {}
//		    fragment = types.TypesGeneratorFragment2 {}
//		    fragment = xbase.XtypeGeneratorFragment2 {}
//		    fragment = xbase.XbaseGeneratorFragment2 {}
//		    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
		    fragment = ui.compare.CompareFragment2 {}
//		    fragment = web.WebIntegrationFragment {
//		        framework = "Ace"
//		    }
//		    fragment = ui.projectWizard.TemplateProjectWizardFragment {}
//		    fragment = ui.fileWizard.TemplateFileWizardFragment {}
		    
		    // missing fragment
//			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
		}
	}
}

